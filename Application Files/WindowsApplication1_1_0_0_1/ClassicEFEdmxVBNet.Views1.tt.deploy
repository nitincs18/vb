<#
'Copyright (c) Pawel Kadluczka. All rights reserved.
'
'AS IS, NO WARRANTY, USE ON YOUR OWN RISK
'
'T4 template for creating pre-generated views for Entity Framework (EF4 or EF5) Database/Model First applications

'Usage: 
'1. Add this template to your project - make sure that the name contains the name of your .edmx file (e.g. MyModel.Views.tt for MyModel.edmx file)
'2. If you did not follow 1) rename this template so that its name contains the name of your .edmx file (e.g. MyModel.Views.tt for MyModel.edmx file)
'3. Right-click the template file in the Solution Explorer and select "Run Custom Tool"
'4. If you have more than one .edmx file in your project you need to add a separate template for each
'   file you want to create pre-generated views for.
#>
<#@ template debug="false" hostspecific="true" language="VB" #>
<#@ output extension=".vb" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.Data.Entity" #>
<#@ import namespace="System.Data.Entity.Design" #>
<#@ import namespace="System.Data.Metadata.Edm" #>
<#@ import namespace="System.Data.Mapping" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="System.Data.Entity.Design" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>

<# 
	' Find the edmx file - MyModel.Views.tt generates views for MyModel.EDMX
	Dim edmxFileName As String = Path.GetFileNameWithoutExtension(Host.TemplateFile).Split("."c)(0) & ".edmx"
	Dim edmxFilePath As String = Path.Combine(Path.GetDirectoryName(Host.TemplateFile), edmxFileName)

	If Not File.Exists(edmxFilePath) Then
		Me.Error(String.Format("Could not find file {0}. Make sure the template name is using convention '{{EdmxFileName}}.Views.tt'", edmxFilePath))
	Else
		Dim mappingItemCollection As StorageMappingItemCollection = GetMappingItemCollection(edmxFilePath)
		WriteLine(GenerateViews(mappingItemCollection))
	End If
#>
<#+
	Private Shared Function GenerateViews(ByVal mappingItemCollection As StorageMappingItemCollection) As String
		
		Using memoryStream As MemoryStream = new MemoryStream()
			Using writer As new StreamWriter(memoryStream)
				Dim viewGenerator As EntityViewGenerator = new EntityViewGenerator() With { .LanguageOption = LanguageOption.GenerateVBCode }
				Dim errors As IList(Of EdmSchemaError) = viewGenerator.GenerateViews(mappingItemCollection, writer, GetTargetEntityFrameworkVersion(mappingItemCollection))

				If errors.Any() Then			
					For Each _error As EdmSchemaError in errors
						Error(_error.Message)
					Next
					Return String.Empty
				End If

				memoryStream.Position = 0
				Using reader As new StreamReader(memoryStream)
					Return reader.ReadToEnd()
				End Using
			End Using
		End Using
	End Function

	Private Shared Function GetMappingItemCollection(ByVal edmxFilePath As String) As StorageMappingItemCollection
		Dim csdlReader As XmlReader = Nothing
		Dim ssdlReader As XmlReader = Nothing
		Dim mslReader As XmlReader = Nothing
		SplitEdmx(edmxFilePath, csdlReader, ssdlReader, mslReader)
		Return CreateMappingItemCollection(csdlReader, ssdlReader, mslReader)
	End Function

	Private Shared Sub SplitEdmx(ByVal edmxFilePath As String, ByRef csdlReader As XmlReader, ByRef ssdlReader As XmlReader, ByRef mslReader As XmlReader)
      
		Dim edmx As XDocument = XDocument.Load(edmxFilePath)
      
		' xml namespace agnostic to make it work with any version of Entity Framework
		Dim edmxNs As XNamespace = edmx.Root.Name.Namespace

		Dim storageModels As XElement = edmx.Descendants(edmxNs + "StorageModels").Single()
		Dim conceptualModels As XElement = edmx.Descendants(edmxNs + "ConceptualModels").Single()
		Dim mappings As XElement = edmx.Descendants(edmxNs + "Mappings").Single()

		ssdlReader = storageModels.Elements().Single(Function(e) e.Name.LocalName = "Schema").CreateReader()
		csdlReader = conceptualModels.Elements().Single(Function(e) e.Name.LocalName = "Schema").CreateReader()
		mslReader = mappings.Elements().Single(Function(e) e.Name.LocalName = "Mapping").CreateReader()
	End Sub

	Private Shared Function CreateMappingItemCollection(ByVal csdlReader As XmlReader,ByVal ssdlReader As XmlReader,ByVal mslReader As XmlReader) As StorageMappingItemCollection
		Dim edmItemCollection As EdmItemCollection = New EdmItemCollection(New XmlReader() { csdlReader })
		Dim storeItemCollection As StoreItemCollection = New StoreItemCollection(New XmlReader() { ssdlReader })
		Return New StorageMappingItemCollection(edmItemCollection, storeItemCollection, new XmlReader() { mslReader })
	End Function

	Private Shared Function GetTargetEntityFrameworkVersion(ByVal mappingItemCollection As StorageMappingItemCollection) As Version
		Dim v As Version = Version.Parse(mappingItemCollection.MappingVersion.ToString("F1", CultureInfo.InvariantCulture))
		Return New Version(v.Major, v.Minor, 0, 0)
	End Function
#>